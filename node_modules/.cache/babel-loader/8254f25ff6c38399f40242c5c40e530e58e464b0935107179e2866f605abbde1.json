{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst {\n  promisify\n} = require('util');\nconst semverGte = require('semver/functions/gte');\nconst useNativeRecursiveOption = semverGte(process.version, '10.12.0');\n\n// https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\nconst checkPath = pth => {\n  if (process.platform === 'win32') {\n    const pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n    if (pathHasInvalidWinCharacters) {\n      const error = new Error(`Path contains invalid characters: ${pth}`);\n      error.code = 'EINVAL';\n      throw error;\n    }\n  }\n};\nconst processOptions = options => {\n  const defaults = {\n    mode: 0o777,\n    fs\n  };\n  return {\n    ...defaults,\n    ...options\n  };\n};\nconst permissionError = pth => {\n  // This replicates the exception of `fs.mkdir` with native the\n  // `recusive` option when run on an invalid drive under Windows.\n  const error = new Error(`operation not permitted, mkdir '${pth}'`);\n  error.code = 'EPERM';\n  error.errno = -4048;\n  error.path = pth;\n  error.syscall = 'mkdir';\n  return error;\n};\nconst makeDir = async (input, options) => {\n  checkPath(input);\n  options = processOptions(options);\n  const mkdir = promisify(options.fs.mkdir);\n  const stat = promisify(options.fs.stat);\n  if (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {\n    const pth = path.resolve(input);\n    await mkdir(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n    return pth;\n  }\n  const make = async pth => {\n    try {\n      await mkdir(pth, options.mode);\n      return pth;\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n        await make(path.dirname(pth));\n        return make(pth);\n      }\n      try {\n        const stats = await stat(pth);\n        if (!stats.isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch {\n        throw error;\n      }\n      return pth;\n    }\n  };\n  return make(path.resolve(input));\n};\nmodule.exports = makeDir;\nmodule.exports.sync = (input, options) => {\n  checkPath(input);\n  options = processOptions(options);\n  if (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\n    const pth = path.resolve(input);\n    fs.mkdirSync(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n    return pth;\n  }\n  const make = pth => {\n    try {\n      options.fs.mkdirSync(pth, options.mode);\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n        make(path.dirname(pth));\n        return make(pth);\n      }\n      try {\n        if (!options.fs.statSync(pth).isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch {\n        throw error;\n      }\n    }\n    return pth;\n  };\n  return make(path.resolve(input));\n};","map":{"version":3,"names":["fs","require","path","promisify","semverGte","useNativeRecursiveOption","process","version","checkPath","pth","platform","pathHasInvalidWinCharacters","test","replace","parse","root","error","Error","code","processOptions","options","defaults","mode","permissionError","errno","syscall","makeDir","input","mkdir","stat","resolve","recursive","make","dirname","message","includes","stats","isDirectory","module","exports","sync","mkdirSync","statSync"],"sources":["/Users/martintirtawisata/my-react-app-pos/node_modules/istanbul-lib-report/node_modules/make-dir/index.js"],"sourcesContent":["'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst {promisify} = require('util');\nconst semverGte = require('semver/functions/gte');\n\nconst useNativeRecursiveOption = semverGte(process.version, '10.12.0');\n\n// https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\nconst checkPath = pth => {\n\tif (process.platform === 'win32') {\n\t\tconst pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n\t\tif (pathHasInvalidWinCharacters) {\n\t\t\tconst error = new Error(`Path contains invalid characters: ${pth}`);\n\t\t\terror.code = 'EINVAL';\n\t\t\tthrow error;\n\t\t}\n\t}\n};\n\nconst processOptions = options => {\n\tconst defaults = {\n\t\tmode: 0o777,\n\t\tfs\n\t};\n\n\treturn {\n\t\t...defaults,\n\t\t...options\n\t};\n};\n\nconst permissionError = pth => {\n\t// This replicates the exception of `fs.mkdir` with native the\n\t// `recusive` option when run on an invalid drive under Windows.\n\tconst error = new Error(`operation not permitted, mkdir '${pth}'`);\n\terror.code = 'EPERM';\n\terror.errno = -4048;\n\terror.path = pth;\n\terror.syscall = 'mkdir';\n\treturn error;\n};\n\nconst makeDir = async (input, options) => {\n\tcheckPath(input);\n\toptions = processOptions(options);\n\n\tconst mkdir = promisify(options.fs.mkdir);\n\tconst stat = promisify(options.fs.stat);\n\n\tif (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {\n\t\tconst pth = path.resolve(input);\n\n\t\tawait mkdir(pth, {\n\t\t\tmode: options.mode,\n\t\t\trecursive: true\n\t\t});\n\n\t\treturn pth;\n\t}\n\n\tconst make = async pth => {\n\t\ttry {\n\t\t\tawait mkdir(pth, options.mode);\n\n\t\t\treturn pth;\n\t\t} catch (error) {\n\t\t\tif (error.code === 'EPERM') {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\tif (path.dirname(pth) === pth) {\n\t\t\t\t\tthrow permissionError(pth);\n\t\t\t\t}\n\n\t\t\t\tif (error.message.includes('null bytes')) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tawait make(path.dirname(pth));\n\n\t\t\t\treturn make(pth);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst stats = await stat(pth);\n\t\t\t\tif (!stats.isDirectory()) {\n\t\t\t\t\tthrow new Error('The path is not a directory');\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn pth;\n\t\t}\n\t};\n\n\treturn make(path.resolve(input));\n};\n\nmodule.exports = makeDir;\n\nmodule.exports.sync = (input, options) => {\n\tcheckPath(input);\n\toptions = processOptions(options);\n\n\tif (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\n\t\tconst pth = path.resolve(input);\n\n\t\tfs.mkdirSync(pth, {\n\t\t\tmode: options.mode,\n\t\t\trecursive: true\n\t\t});\n\n\t\treturn pth;\n\t}\n\n\tconst make = pth => {\n\t\ttry {\n\t\t\toptions.fs.mkdirSync(pth, options.mode);\n\t\t} catch (error) {\n\t\t\tif (error.code === 'EPERM') {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\tif (path.dirname(pth) === pth) {\n\t\t\t\t\tthrow permissionError(pth);\n\t\t\t\t}\n\n\t\t\t\tif (error.message.includes('null bytes')) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tmake(path.dirname(pth));\n\t\t\t\treturn make(pth);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (!options.fs.statSync(pth).isDirectory()) {\n\t\t\t\t\tthrow new Error('The path is not a directory');\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn pth;\n\t};\n\n\treturn make(path.resolve(input));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}